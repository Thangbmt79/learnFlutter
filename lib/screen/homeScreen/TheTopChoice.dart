// ignore_for_file: unused_field, avoid_unnecessary_containers, unnecessary_brace_in_string_interps

import 'dart:convert';

import 'package:firstflutter/controllers/users_controllers.dart';
import 'package:firstflutter/main.dart';
import 'package:firstflutter/models/movies.dart';
import 'package:firstflutter/models/users.dart';
import 'package:firstflutter/screen/detail_movie_screen.dart';
import 'package:firstflutter/screen/helper/button/button.dart';
import 'package:firstflutter/screen/homeScreen/home_screen.dart';
import 'package:flutter/material.dart';

class TheTopChoice extends StatefulWidget {
  const TheTopChoice({super.key});

  @override
  State<TheTopChoice> createState() => _TheTopChoiceState();
}

handlePlay() {
  logger.i("played");
}

handleList(BuildContext context) {
  Navigator.push(
    context,
    MaterialPageRoute(builder: (context) => const HomeScreen()),
  );
}

class _TheTopChoiceState extends State<TheTopChoice> {
  bool _isLoading = false;
  final usersController = UsersController();
  List<Autogenerated> userList = [];
  Future<void> fetchData() async {
    setState(() {
      _isLoading = true;
    });
    try {
      userList = await usersController.getMovies();
      logger.e("Response data: ${userList}");

      setState(() {});
    } catch (e) {
      logger.i("[ERR] getListCancellations ${e.toString()}");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      scrollDirection: Axis.vertical,
      child: !_isLoading
          ? Column(
              children: userList.map((users) {
                return GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => DetailMovies(userId: 1),
                      ),
                    );
                  },
                  child: Container(
                    padding: const EdgeInsets.only(bottom: 7),
                    margin: const EdgeInsets.symmetric(vertical: 10),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(10.0),
                      child: Column(
                        children: [
                          Image.network(
                            users.image,
                          ),
                          Container(
                            padding: const EdgeInsets.only(top: 5, left: 7),
                            alignment: Alignment.centerLeft,
                            child: Text(
                              users.title,
                              style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 18,
                              ),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.all(7),
                            alignment: Alignment.centerLeft,
                            child: Text(
                              users.publishedAt,
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                              ),
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.only(
                                left: 7, right: 7, bottom: 7),
                            child: Text(
                              users.content,
                              style: const TextStyle(color: Colors.white60),
                              overflow: TextOverflow.ellipsis,
                              maxLines: 4,
                            ),
                          ),
                          Container(
                            padding: const EdgeInsets.only(left: 7),
                            alignment: Alignment.centerLeft,
                            child: const Row(
                              children: [
                                Button(
                                  buttonText: "Play",
                                  svgAssetPath: "assets/svg/play.svg",
                                  onPressed: handlePlay,
                                  backgroundColor: Colors.white,
                                ),
                                SizedBox(width: 10),
                                Button(
                                  buttonText: "List",
                                  svgAssetPath: "assets/svg/list.svg",
                                  onPressed: handlePlay,
                                  backgroundColor: Colors.white12,
                                  textColor: Colors.white,
                                  iconColor: Colors.white,
                                ),
                              ],
                            ),
                          )
                        ],
                      ),
                    ),
                  ),
                );
              }).toList(),
            )
          : Container(
              alignment: Alignment.center,
              child: const CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            ),
    );
  }
}
